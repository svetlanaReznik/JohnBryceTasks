package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import bean.Category;
import util.DateUtils;

public class DBUtils 
{
	/** for drop&create tables*/
	public static void runQuery(String sql) throws SQLException 
	{
		Connection connection = null;

		try {
			connection = ConnectionPool.getInstance().getConnection();
		} catch (InterruptedException | SQLException e) {
			System.out.println(e.getMessage());
		}

		PreparedStatement statement = connection.prepareStatement(sql); // JDBC - STEP 3
		statement.execute();
		ConnectionPool.getInstance().restoreConnection(connection); // JDBC - STEP 5 - return connection to pool
	}

	/**to set parameters of a query*/
	public static void runQuery(String sql, Map<Integer, Object> map) throws SQLException 
	{
		Connection connection = null;
		try {
			connection = ConnectionPool.getInstance().getConnection();
		} catch (InterruptedException | SQLException e) {
			System.out.println(e.getMessage());
		}

		PreparedStatement statement = connection.prepareStatement(sql);
		
		toPrepareStatement(map, statement).execute();
		ConnectionPool.getInstance().restoreConnection(connection);
	}

	public static PreparedStatement toPrepareStatement(Map<Integer, Object> map, PreparedStatement statement) throws SQLException 
	{
		for (Entry<Integer, Object> entry : map.entrySet()) {
			int key = entry.getKey();
			Object value = entry.getValue();
			if (value instanceof Integer) {
				statement.setInt(key, (int) value);
			} else if (value instanceof Float) {
				statement.setFloat(key, (float) value);
			}else if (value instanceof Double) {
					statement.setDouble(key, (double) value);	
			} else if (value instanceof String) {
				statement.setString(key, String.valueOf(value));
			} else if (value instanceof Date) {
				statement.setDate(key, DateUtils.convert((Date) value));
			}
		}
		return statement;
	}

	public static ResultSet runQueryWithResult(String sql, Map<Integer, Object> map) throws SQLException 
	{
		ResultSet resultSet = null;
		Connection connection = null;

		try {
			connection = ConnectionPool.getInstance().getConnection();
		} catch (InterruptedException | SQLException e) {
			System.out.println(e.getMessage());
		}

		PreparedStatement statement = connection.prepareStatement(sql);
		resultSet = toPrepareStatement(map, statement).executeQuery(); // JDBC - STEP 4
		ConnectionPool.getInstance().restoreConnection(connection);

		return resultSet;
	}

	public static ResultSet runQueryWithAutoIncUpdate(String sql, Map<Integer, Object> map) throws SQLException 
	{
		ResultSet resultSet = null;
		Connection connection = null;

		try {
			connection = ConnectionPool.getInstance().getConnection();
		} catch (InterruptedException | SQLException e) {
			System.out.println(e.getMessage());
		}

		PreparedStatement statement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
		toPrepareStatement(map, statement).executeUpdate();

		resultSet = statement.getGeneratedKeys(); 		// get the new id generated by auto-increment in DB
		resultSet.next();								// points to index -1 (out of table) -> need to move to index 0
		ConnectionPool.getInstance().restoreConnection(connection);

		return resultSet;
	}

	public static int runQueryWithQuantityResult(String sql, Map<Integer, Object> map) throws SQLException 
	{
		Connection connection = null;

		try {
			connection = ConnectionPool.getInstance().getConnection();
		} catch (InterruptedException | SQLException e) {
			System.out.println(e.getMessage());
		}

		PreparedStatement statement = connection.prepareStatement(sql);
		int result = toPrepareStatement(map, statement).executeUpdate();
		ConnectionPool.getInstance().restoreConnection(connection);

		return result;
	}
}
